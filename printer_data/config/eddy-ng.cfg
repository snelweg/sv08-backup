[mcu eddy]
# FOR USB: replace this with your serial port ID
# FOR CANBUS: replace this with your canbus UUID
serial: /dev/serial/by-id/usb-Klipper_rp2040_50445061209D921C-if00
restart_method: command

[probe_eddy_ng btt_eddy]
sensor_type: btt_eddy
i2c_mcu: eddy
i2c_bus: i2c0f
x_offset: -16
y_offset: 11.5

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu
sensor_mcu: eddy
min_temp: 10
max_temp: 100

[temperature_sensor btt_eddy]
sensor_type: Generic 3950
sensor_pin: eddy:gpio26

[bed_mesh]
speed: 500
horizontal_move_z: 2
mesh_min: 20,20#10,10
mesh_max: 320,320 # 333,340
probe_count: 9,9
algorithm: bicubic
bicubic_tension: 0.4
split_delta_z: 0.016
mesh_pps:3,3
adaptive_margin: 5
fade_start: 0
fade_end: 10
fade_target: 0

# COMMENTED FOR REFERENCE, WE NOW USE HOMING OVERRIDE BELOW
[safe_z_home]
home_xy_position: 172, 172
z_hop: 10
z_hop_speed: 25
speed: 200

####https://github.com/vvuk/eddy-ng/wiki/Macros-Safety
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    SAVE_GCODE_STATE NAME=STATE_QGL
    BED_MESH_CLEAR
    # If QGL has not been done yet, correct for any major skew first
    # at 8mm height
    {% if not printer.quad_gantry_level.applied %}
    _QUAD_GANTRY_LEVEL horizontal_move_z=8 retry_tolerance=1      
    {% endif %}
    # Complete with a full QGL at the configured height
    _QUAD_GANTRY_LEVEL
    RESTORE_GCODE_STATE NAME=STATE_QGL

# [z_tilt]
# horizontal_move_z: 2.0

# [gcode_macro Z_TILT_ADJUST]
# rename_existing: _Z_TILT_ADJUST
# gcode:
#     SAVE_GCODE_STATE NAME=STATE_Z_TILT
#     BED_MESH_CLEAR
#     {% if not printer.z_tilt.applied %}
#     _Z_TILT_ADJUST horizontal_move_z=8 retry_tolerance=1
#     {% endif %}
#     _Z_TILT_ADJUST horizontal_move_z=2
#     RESTORE_GCODE_STATE NAME=STATE_Z_TILT